<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the Variables
hspeed_ = 0;
vspeed_ = 0;
gravity_ = .5;
acceleration_ = 1;
jump_height_ = -10;
max_hspeed_ = 4;
friction_ = .3;

//Map of the keys
keyboard_set_map(ord("D"), vk_right);
keyboard_set_map(ord("A"), vk_left);
keyboard_set_map(ord("S"), vk_down);
keyboard_set_map(ord("W"), vk_up);

//Bullet Cooldown
bullet_cooldown_ = room_speed/6;
alarm[0] = bullet_cooldown_;

x_scale_ = image_xscale * 4;
y_scale_ = image_yscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var hinput = keyboard_check(vk_right) - keyboard_check(vk_left);

if hinput != 0 {
    hspeed_ += hinput*acceleration_;
    hspeed_ = clamp(hspeed_, -max_hspeed_, max_hspeed_);
} else {
    hspeed_ = lerp( hspeed_, 0, friction_);
}

if !place_meeting(x, y+1, o_solid) {
    vspeed_ += gravity_;
} else {
    if keyboard_check_pressed(vk_space) {
        vspeed_ = jump_height_;
        x_scale_ = image_xscale * .8;
        y_scale_ = image_yscale * 1.4;
    }
}

//Collisons
//move();

//Check for landing
if place_meeting(x, y+1, o_solid) &amp;&amp; !place_meeting(x, yprevious+1, o_solid) {
    x_scale_ = image_xscale * 1.4;
    y_scale_ = image_yscale *.8;
}

//Move back to normal scale
x_scale_ = lerp(x_scale_, image_xscale, .1);
y_scale_ = lerp(y_scale_, image_yscale, .2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///instance_create_layer(x,y,"Instances",o_bullet);
if alarm[0] &lt;= 0 {
    var dir = point_direction(x, y-12, mouse_x, mouse_y);
    var flipped = (mouse_x &gt; x)*2-1; ///(gives 1 or 0)*2-1 = (-1 or 1)
    var x_offset = lengthdir_x(16, dir);
    var y_offset = lengthdir_y(16, dir);
    
    instance_create(x+x_offset,y-12+y_offset,o_bullet);
    alarm[0] = bullet_cooldown_;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player and gun
var dir = point_direction(x, y-12, mouse_x, mouse_y);
var flipped = (mouse_x &gt; x)*2-1; ///(gives 1 or 0)*2-1 = (-1 or 1)


///draw the player
draw_sprite_ext(s_player, 0, x, y, x_scale_*flipped, y_scale_, 0, image_blend, image_alpha);
///draw the gun
draw_sprite_ext(s_gun, 0, x, y-12, 1, flipped, dir, image_blend, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
