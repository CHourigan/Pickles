<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the Variables
hspeed_ = 0;
vspeed_ = 0;
gravity_ = 1;
acceleration_ = 1;
jump_height_ = -13;
max_hspeed_ = 4;
friction_ = .3;
flipped_ = 1;
state_ = player_states.p_fall;


//Bullet Variables
bullet_x_dir = flipped_;
bullet_y_dir = 0;
bullet_x_offset = 8;
bullet_y_offset = 6;

//Map of the keys
keyboard_set_map(ord("D"), vk_right);
keyboard_set_map(ord("A"), vk_left);
keyboard_set_map(ord("S"), vk_down);
keyboard_set_map(ord("W"), vk_up);

//Bullet Cooldown
bullet_cooldown_ = room_speed/15;
alarm[0] = bullet_cooldown_;

x_scale_ = image_xscale;
y_scale_ = image_yscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bullet alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state_) {
    case player_states.p_idle: scr_idle_state(); break;
    case player_states.p_move: scr_move_state(); break;
    case player_states.p_jump: scr_jump_state(); break;
    case player_states.p_fall: scr_fall_state(); break;
    case player_states.p_crouch: scr_down_state(); break;
    case player_states.p_aim_up: scr_aim_up_state(); break;
}


//Collisons
collision_check();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///instance_create_layer(x,y,"Instances",o_bullet);

if alarm[0] &lt;= 0 {
    var bullet_ = instance_create(x+(flipped_ *bullet_x_offset),y-bullet_y_offset,o_bullet);
    bullet_.direction = point_direction(x,y,x+bullet_x_dir,y-bullet_y_dir);
    alarm[0] = bullet_cooldown_;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the player

/*
  Draw the player based on what state is set. The flipped_ variable tells
  us which way the sprite should be facing.
*/
switch(state_)
    {
    //Use idle sprite when idle.
    case player_states.p_idle:
        mask_index = spr_player_idle;
        draw_sprite_ext( spr_player_idle, 0, x, y, x_scale_*flipped_, y_scale_, 0, image_blend, image_alpha );
        break;
        
    //Use moving sprite animation when moving.    
    case player_states.p_move:
        mask_index = spr_player_running;
        draw_sprite_ext( spr_player_running, image_index, x, y, x_scale_*flipped_, y_scale_, 0, image_blend, image_alpha );
        break;
        
    //Use jump sprite animation when jumping/falling   
    case player_states.p_jump:
    case player_states.p_fall:
        mask_index = spr_player_jump
        draw_sprite_ext( spr_player_jump, image_index, x, y, x_scale_*flipped_, y_scale_, 0, image_blend, image_alpha );
        break;
        
    //Use crouch sprite animation when laying down
    case player_states.p_crouch:
        mask_index = spr_player_down
        draw_sprite_ext( spr_player_down, image_index, x, y+9, x_scale_*flipped_, y_scale_, 0, image_blend, image_alpha );
        break;
        
    //Use aim_up animation when aiming up
    case player_states.p_aim_up:
        mask_index = spr_player_aim_up;
        draw_sprite_ext( spr_player_aim_up, image_index, x-2, y-13, x_scale_*flipped_, y_scale_, 0, image_blend, image_alpha );
        break;
        
    default:
        break;   
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
