<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description create properties
// object: o_camera

/*
 * --- Object Constants ---
 */
DEFAULT_VIEW    = 0;
FRICTION        = 5;

/*
 * --- User-Defined Variables ---
 */
camera_ = view_camera[DEFAULT_VIEW];    // set camera to viewport
follow_ = o_player;                     // follow target for camera

// camera is centered on player object, so we need width &amp; height in halves
view_w_half_ = view_wview[DEFAULT_VIEW] * 0.5;
view_h_half_ = view_hview[DEFAULT_VIEW] * 0.5;

// represents the coords of where the player is going
next_x = xstart;
next_y = ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description step event properties
// object: o_camera

/*
 * Calculate Positioning
 */
 if( instance_exists( follow_ ) )
    {
    next_x = follow_.x;
    next_y = follow_.y;
    }
 
 /*
  * Update Position
  *     We calculate out positioning change and divide by friction value 
  *     for a smoother camera movement.
  */
x += ( next_x - x ) / FRICTION;
y += ( next_y - y ) / FRICTION;

// cap camera movement when it's close to room edges
x = clamp( x, view_w_half_, room_width - view_w_half_ );
y = clamp( y, view_h_half_, room_height - view_h_half_ );

/*
 * Update Camera View
 */
view_xview = x - view_w_half_;
view_yview = y - view_h_half_;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
